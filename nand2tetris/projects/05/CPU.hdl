// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Put your code here:
    Not(in=instruction[15],out=instructionIsAddress);



    //Mux A Register Input
    //Selects the input into the A register, this will be either:
    //- The value currently being output by the ALU, following an address computation
    //- The instruction currently being read from ROM
    //a: the output from the ALU
    //b: the instruction to be executed
    //sel: the first bit of the incoming instruction as this determines wether we are dealing with an address or instruction
    //out: the input into the a register
    Mux16(a=aluOutput,b=instruction,sel=instructionIsAddress,out=aRegisterInput);

    //A Register
    //in: input to register a is a mux of the instruction or ALU computation
    //storeA: if the input is an address we always store, otherwise it depends on the destination bits in the instruction
    //out: is fed into both the program counter, in case of a jump and the ALU in case of a computation
    Or(a=instructionIsAddress,b=instruction[5],out=storeA);
    ARegister(in=aRegisterInput,load=storeA,out=aRegisterOutput, out[0..14]=addressM);

    //D Register
    //in: is the output of the previous ALU computation
    //load: a value is placed in the d register, if this is an instruction and the destination d bit is set
    //out: is fed into the ALU in case of a computation
    And(a=instruction[15],b=instruction[4],out=storeD);
    DRegister(in=aluOutput,load=storeD,out=aluXInput);

    //Program Counter
    //in=aRegisterOutput is the address from the A register
    //TODOB load is based on the output from the ALU and jump flags
    //TODOC inc is based on jump flags
    PC( in=aRegisterOutput, load=jump, inc=inc, reset=reset, out[0..14]=pc );

    //Mux ALU Y Input
    //Selects the correct value to be input into the ALU's y parameter
    //this will be either the value stored in the A register, or the value stored in the currently addressed piece of
    //memory
    //a=aRegisterOutput: the value currently stored in the a register
    //b=inM: value currently addressed in memory
    //sel=TODOA: the control bit which decides which value to feed into the ALU
    //out=aluYInput: the y input into the ALU
    And(a=instruction[15],b=instruction[12],out=selectYInputFromMemory);
    Mux16(a=aRegisterOutput,b=inM,sel=selectYInputFromMemory,out=aluYInput);

    //ALU
    ALU(x=aluXInput,y=aluYInput,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=aluOutput,out=outM,zr=zr,ng=ng);


    //Jump
    //If we are processing an instruction then we check the jump flags otherwise we increment
    //
    //intruction[2] jump if output is negative
    //instruction[1] jump if output is zero
    //instruction[0] jump if output is positive
    And( a=instruction[2],b=ng,out=jumpNegative);
    And( a=instruction[1],b=zr,out=jumpZero);
    Or(a=ng,b=zr,out=notPositive);
    Not(in=notPositive,out=positive);
    And( a=instruction[0], b=positive, out=jumpPositive);
    Or8Way(in[0]=jumpNegative,in[1]=jumpZero,in[2]=jumpPositive, out=jumpFlag);

    And(a=jumpFlag,b=instruction[15],out=jump);

    //Incrememnt
    Not(in=jump,out=notJump);
    Or(a=notJump,b=instructionIsAddress,out=inc);

    And(a=instruction[15],b=instruction[3],out=writeM);
    //writeM=instruction[10];
}
